package fi.joniaromaa.parinacorelibrary.bukkit.nms.v1_8_R3;

import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;

import org.bukkit.Bukkit;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.craftbukkit.v1_8_R3.event.CraftEventFactory;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.google.common.util.concurrent.RateLimiter;

import net.minecraft.server.v1_8_R3.EntityPlayer;
import net.minecraft.server.v1_8_R3.ItemBookAndQuill;
import net.minecraft.server.v1_8_R3.ItemStack;
import net.minecraft.server.v1_8_R3.ItemWrittenBook;
import net.minecraft.server.v1_8_R3.Items;
import net.minecraft.server.v1_8_R3.NBTBase;
import net.minecraft.server.v1_8_R3.NBTTagString;
import net.minecraft.server.v1_8_R3.PacketDataSerializer;
import net.minecraft.server.v1_8_R3.PacketPlayInCustomPayload;
import net.minecraft.server.v1_8_R3.PlayerConnection;

public class NsmHandlerExploit implements fi.joniaromaa.parinacorelibrary.bukkit.nms.handlers.NsmHandlerExploit
{
	@Override
	public void throttle(Plugin plugin, ConcurrentMap<UUID, RateLimiter> players, PacketEvent event)
	{
		PacketType packetType = event.getPacketType();
		if (packetType.equals(PacketType.Play.Client.CUSTOM_PAYLOAD))
		{
			PacketContainer packet = event.getPacket();
			if (packet.getHandle() instanceof PacketPlayInCustomPayload)
			{
				PacketPlayInCustomPayload customPayload = (PacketPlayInCustomPayload)packet.getHandle();
				
				boolean editBook = "MC|BEdit".equals(customPayload.a());
				boolean signBook = "MC|BSign".equals(customPayload.a());
				if (editBook || signBook) //Rate limit
				{
					event.setCancelled(true); //Don't handle this on the main thread
					
					Player player = event.getPlayer();
					
					EntityPlayer entityPlayer = ((CraftPlayer)player).getHandle();
					PlayerConnection playerConnection = entityPlayer.playerConnection;
	
					//Start keeping time before we do any type of parsing
					long startTime = System.nanoTime();
					
					PacketDataSerializer packetDataSerializer = customPayload.b();
					
					try
					{
						ItemStack itemStack = packetDataSerializer.i();
						if (itemStack != null)
						{
							if (editBook)
							{
								if (!ItemBookAndQuill.b(itemStack.getTag()))
								{
				                    throw new IOException("Invalid book tag!");
								}
								
								if (itemStack.getItem() != Items.WRITABLE_BOOK)
								{
									return;
								}
							}
							else if (signBook)
							{
				                if (!ItemWrittenBook.b(itemStack.getTag()))
				                {
				                    throw new IOException("Invalid book tag!");
				                }
				               
				                if (itemStack.getItem() != Items.WRITTEN_BOOK)
				                {
				                	return;
				                }
							}
							
							//This takes almost zero time, don't do anything else
							Bukkit.getServer().getScheduler().runTask(plugin, () ->
							{
								ItemStack itemInHand = entityPlayer.inventory.getItemInHand();
								if (itemInHand != null)
								{
									if (itemInHand.getItem() != Items.WRITABLE_BOOK)
									{
										return;
									}
									
									ItemStack bookItemStack;
									if (editBook)
									{
										bookItemStack = new ItemStack(Items.WRITABLE_BOOK);
									}
									else if (signBook)
									{
										bookItemStack = new ItemStack(Items.WRITTEN_BOOK);
										bookItemStack.a("author", (NBTBase) (new NBTTagString(playerConnection.player.getName())));
										bookItemStack.a("title", (NBTBase) (new NBTTagString(itemStack.getTag().getString("title"))));
									}
									else
									{
										return;
									}
	
									bookItemStack.a("pages", (NBTBase) itemStack.getTag().getList("pages", 8));
									
	                                CraftEventFactory.handleEditBookEvent(entityPlayer, bookItemStack);
								}
							});
						}
					}
					catch (IOException e)
					{
						e.printStackTrace();
						
						playerConnection.disconnect("Invalid book data!");
					}
					finally
					{
						packetDataSerializer.release();
						
						//All done, no need to keep track of the time anymore, calc the time and maybe throotle
						long endTime = System.nanoTime();
						
						int tookMs = Math.toIntExact(TimeUnit.NANOSECONDS.toMillis(endTime - startTime));
						if (tookMs > 0)
						{
							RateLimiter rateLimiter = players.computeIfAbsent(player.getUniqueId(), (k) -> RateLimiter.create(250, 1, TimeUnit.SECONDS));
							rateLimiter.acquire(tookMs);
						}
					}
				}
			}
		}
	}
}

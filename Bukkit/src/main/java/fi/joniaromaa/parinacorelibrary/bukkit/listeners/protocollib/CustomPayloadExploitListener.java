package fi.joniaromaa.parinacorelibrary.bukkit.listeners.protocollib;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.ListenerOptions;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.google.common.collect.Lists;
import com.google.common.util.concurrent.RateLimiter;

import fi.joniaromaa.parinacorelibrary.bukkit.ParinaCoreBukkitPlugin;
import fi.joniaromaa.parinacorelibrary.bukkit.nms.NmsManager;

public class CustomPayloadExploitListener extends PacketAdapter
{
	private final static List<PacketType> PACKETS = Lists.newArrayList(PacketType.Play.Client.CUSTOM_PAYLOAD);
	
	private ConcurrentMap<UUID, RateLimiter> players;
	
	public CustomPayloadExploitListener(ParinaCoreBukkitPlugin plugin)
	{
		super(plugin.getLoader(), ListenerPriority.HIGHEST, CustomPayloadExploitListener.PACKETS, new ListenerOptions[] { ListenerOptions.ASYNC });
		
		this.plugin.getServer().getPluginManager().registerEvents(new BukkitListener(this), this.plugin);
		
		this.players = new ConcurrentHashMap<>();
	}
	
	@Override
	public void onPacketReceiving(PacketEvent event)
	{
		if (!event.isCancelled())
		{
			NmsManager.getNmsHandler().getExploitHandler().throttle(this.plugin, this.players, event);
		}
	}
	
	private class BukkitListener implements Listener
	{
		private CustomPayloadExploitListener mainListener;
		
		private BukkitListener(CustomPayloadExploitListener mainListener)
		{
			this.mainListener = mainListener;
		}
		
		@EventHandler(priority = EventPriority.MONITOR)
		public void onPlayerJoinEvent(PlayerJoinEvent event)
		{
			Player player = event.getPlayer();
			
			this.mainListener.players.put(player.getUniqueId(), RateLimiter.create(250, 1, TimeUnit.SECONDS));
		}
		
		@EventHandler(priority = EventPriority.MONITOR)
		public void onPlayerQuitEvent(PlayerQuitEvent event)
		{
			Player player = event.getPlayer();
			
			this.mainListener.players.remove(player.getUniqueId());
		}
	}
}
